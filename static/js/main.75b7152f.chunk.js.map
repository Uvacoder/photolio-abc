{"version":3,"sources":["components/Header.tsx","components/PageContainer.tsx","components/PaddingContainer.tsx","routes/about/About.tsx","routes/contact/Contact.tsx","components/BlurHashWrapper.tsx","services/ImageService.ts","routes/image/Image.tsx","routes/home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WRAP_DISPLAY_SIZE","Container","styled","div","Icon","Controls","LinkWrapper","Link","p","state","ControlLink","to","title","location","useLocation","Transition","in","pathname","timeout","Header","history","useHistory","onClick","push","PageContainer","PaddingContainer","padding","AboutRoute","ContactRoute","BlurhashContainer","Blurhash","clickable","BlurHashWrapper","image","imageURL","height","width","useState","loaded","setLoaded","calcHeight","Math","floor","dimensions","ratio","calcWidth","call","id","src","onLoad","alt","hash","blurhash","resolutionX","components","resolutionY","ROOT_URL","process","REACT_APP_API_ROOT_URL","ImageService","window","fetch","then","res","json","Image","Details","Small","light","italic","join","sep","v","filter","e","ImageRoute","prefix","match","useRouteMatch","setImage","useEffect","getMeta","params","getImageSource","exif","bodymake","bodymodel","lensmake","lensmodel","iso","undefined","fstop","exposuretime","format","Date","taken","timestamp","GRID_BREAKPOINTS","breakpoints","default","i","Grid","Masonry","HomeRoute","images","setImages","list","imageTiles","map","img","getThumbnailSource","className","breakpointCols","GlobalStyle","createGlobalStyle","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","table"],"mappings":"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","file":"static/js/main.75b7152f.chunk.js","sourcesContent":["import { Link, useHistory, useLocation } from 'react-router-dom';\nimport { Transition } from 'react-transition-group';\nimport styled from 'styled-components';\n\nconst WRAP_DISPLAY_SIZE = '500px';\n\nconst Container = styled.div`\n  padding: 0 5px 25px 5px;\n  display: flex;\n  justify-content: center;\n\n  @media screen and (max-width: ${WRAP_DISPLAY_SIZE}) {\n    flex-flow: column;\n\n    > * {\n      margin: 0 auto;\n    }\n  }\n`;\n\nconst Icon = styled.div`\n  cursor: pointer;\n\n  > * {\n    margin: 0;\n    font-family: 'Montserrat', sans-serif;\n  }\n\n  > h1 {\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 600;\n    font-size: 52px;\n  }\n\n  > h2 {\n    font-weight: 300;\n    font-size: 14px;\n    letter-spacing: 0.25em;\n    text-transform: uppercase;\n  }\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 50px;\n\n  @media screen and (max-width: ${WRAP_DISPLAY_SIZE}) {\n    margin: 20px auto 10px auto;\n  }\n`;\n\nconst LinkWrapper = styled(Link)<{ state: string }>`\n  position: relative;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 18px;\n  text-transform: lowercase;\n  text-decoration: none;\n  color: black;\n\n  margin-right: 20px;\n  &:last-child {\n    margin-right: 0px;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    left: 0;\n    width: ${(p) =>\n      p.state === 'entering' || p.state === 'entered' ? 100 : 0}%;\n    margin-left: ${(p) => (p.state === 'exiting' ? 100 : 0)}%;\n    height: 5px;\n    background-color: black;\n    transition: all 0.2s ease;\n  }\n`;\n\nconst ControlLink: React.FC<{ to: string; title: string }> = ({\n  to,\n  title,\n}) => {\n  const location = useLocation();\n\n  return (\n    <Transition in={location.pathname === to} timeout={200}>\n      {(state) => (\n        <LinkWrapper to={to} state={state}>\n          {title}\n        </LinkWrapper>\n      )}\n    </Transition>\n  );\n};\n\nexport const Header: React.FC = () => {\n  const history = useHistory();\n\n  return (\n    <Container>\n      <Icon onClick={() => history.push('/')}>\n        <h1>zekro</h1>\n        <h2>Photography</h2>\n      </Icon>\n      <Controls>\n        <ControlLink to=\"/\" title=\"Gallery\" />\n        <ControlLink to=\"/about\" title=\"About\" />\n        <ControlLink to=\"/contact\" title=\"Contact\" />\n      </Controls>\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const PageContainer = styled.div`\n  max-width: 1300px;\n  margin: 20px auto 0 auto;\n`;\n","import styled from 'styled-components';\n\nexport const PaddingContainer = styled.div<{ padding?: string | number }>`\n  padding: ${(p) => p.padding ?? '0 5px'};\n`;\n","import { PaddingContainer } from 'components/PaddingContainer';\n\nexport const AboutRoute: React.FC = () => {\n  return (\n    <PaddingContainer>\n      <div>About</div>\n    </PaddingContainer>\n  );\n};\n","import { PaddingContainer } from 'components/PaddingContainer';\n\nexport const ContactRoute: React.FC = () => {\n  return (\n    <PaddingContainer>\n      <div>Contact</div>\n    </PaddingContainer>\n  );\n};\n","import { ImageModel } from 'models/ImageModel';\nimport { useState } from 'react';\nimport { Blurhash } from 'react-blurhash';\nimport styled from 'styled-components';\nimport { Transition } from 'react-transition-group';\n\ninterface ImageProps {\n  imageURL: string;\n}\n\ninterface OptDimensions {\n  height?: string | number;\n  width?: string | number;\n}\n\ninterface Events {\n  onClick?: (id: string) => void;\n}\n\ninterface Props extends ImageProps, OptDimensions, Events {\n  image: ImageModel;\n}\n\nconst BlurhashContainer = styled(Blurhash)<{\n  state: string;\n  clickable: boolean;\n}>`\n  position: absolute !important;\n  top: 0;\n  left: 0;\n  transition: opacity 0.25s ease;\n  opacity: ${(p) => (p.state === 'exited' ? 0 : 1)};\n  cursor: ${(p) => (p.clickable ? 'pointer' : 'auto')};\n`;\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nexport const BlurHashWrapper: React.FC<Props> = ({\n  image,\n  imageURL,\n  height,\n  width,\n  onClick,\n}) => {\n  const [loaded, setLoaded] = useState(false);\n\n  const calcHeight =\n    !height && typeof width === 'number'\n      ? Math.floor(width! * (1 / image.dimensions.ratio))\n      : null;\n  const calcWidth =\n    !width && typeof width === 'number'\n      ? Math.floor(width! * image.dimensions.ratio)\n      : null;\n\n  return (\n    <Container onClick={() => onClick?.call(this, image.id)}>\n      <img\n        src={imageURL}\n        width={width}\n        height={height}\n        onLoad={() => setLoaded(true)}\n        alt=\"\"\n      />\n      <Transition in={!loaded} timeout={0}>\n        {(state) => (\n          <BlurhashContainer\n            hash={image.blurhash.hash}\n            width={width ?? calcWidth ?? '100%'}\n            height={height ?? calcHeight ?? '100%'}\n            resolutionX={image.blurhash.components.width}\n            resolutionY={image.blurhash.components.height}\n            state={state}\n            clickable={!!onClick}\n          />\n        )}\n      </Transition>\n    </Container>\n  );\n};\n","import { ImageModel } from 'models/ImageModel';\n\nconst ROOT_URL =\n  process.env.REACT_APP_API_ROOT_URL ??\n  (process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:5000');\n\nexport default class ImageService {\n  public static list(): Promise<ImageModel[]> {\n    return window.fetch(`${ROOT_URL}/images`).then((res) => res.json());\n  }\n\n  public static getMeta(id: string): Promise<ImageModel> {\n    return window\n      .fetch(`${ROOT_URL}/images/${id}/meta`)\n      .then((res) => res.json());\n  }\n\n  public static getImageSource(id: string): string {\n    return `${ROOT_URL}/images/${id}`;\n  }\n\n  public static getThumbnailSource(id: string, width?: number): string {\n    return `${ROOT_URL}/images/${id}/thumbnail?width=${width}`;\n  }\n}\n","import { BlurHashWrapper } from 'components/BlurHashWrapper';\nimport { PaddingContainer } from 'components/PaddingContainer';\nimport { format } from 'date-fns';\nimport { ImageModel } from 'models/ImageModel';\nimport { useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router';\nimport ImageService from 'services/ImageService';\nimport styled from 'styled-components';\n\ntype Optional<T> = T | undefined;\n\ninterface Match {\n  id: string;\n}\n\nconst Image = styled(BlurHashWrapper)`\n  width: 100%;\n`;\n\nconst Container = styled(PaddingContainer)`\n  margin-bottom: 50px;\n`;\n\nconst Details = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-family: 'Montserrat', sans-serif;\n\n  > p {\n    margin: 0 0 10px 0;\n  }\n`;\n\nconst Small = styled.p<{ italic?: boolean; light?: boolean }>`\n  font-size: 14px;\n  ${(p) => (p.light ? 'opacity: 0.5;' : '')}\n  ${(p) => (p.italic ? 'font-style: italic;' : '')}\n`;\n\nconst join = (sep: string, ...v: Optional<string>[]): string =>\n  v.filter((e) => !!e).join(sep);\n\nconst prefix = (prefix: string, v: Optional<string>): Optional<string> =>\n  !!v ? `${prefix}${v}` : undefined;\n\nexport const ImageRoute: React.FC = () => {\n  const match = useRouteMatch<Match>();\n  const [image, setImage] = useState<ImageModel>();\n\n  useEffect(() => {\n    ImageService.getMeta(match.params.id).then((image) => setImage(image));\n  }, [match, setImage]);\n\n  return (\n    <Container>\n      {image && [\n        <Image\n          image={image!}\n          imageURL={ImageService.getImageSource(image.id)}\n          width=\"100%\"\n        ></Image>,\n        <Details>\n          {(image.exif && [\n            <p>\n              {join(' ', image.exif.bodymake, image.exif.bodymodel)}\n              &nbsp;with&nbsp;\n              {join(' ', image.exif.lensmake, image.exif.lensmodel)}\n            </p>,\n            <p>\n              {join(\n                ' — ',\n                prefix('ISO ', image.exif.iso),\n                image.exif.fstop,\n                image.exif.exposuretime\n              )}\n            </p>,\n          ]) || (\n            <Small italic light>\n              No exif data existent.\n            </Small>\n          )}\n          <Small>\n            {format(\n              new Date(image.exif?.taken ?? image.timestamp),\n              'eeee, do LLLL yyyy — HH:MM:SS O'\n            )}\n          </Small>\n        </Details>,\n      ]}\n    </Container>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { ImageModel } from 'models/ImageModel';\nimport ImageService from 'services/ImageService';\nimport { BlurHashWrapper } from 'components/BlurHashWrapper';\nimport styled from 'styled-components';\nimport Masonry from 'react-masonry-css';\nimport { useHistory } from 'react-router';\n\nconst IMAGE_SIZE = 250;\nconst IMAGE_MARGIN = 5;\nconst MAX_COLUMNS = 5;\n\nconst GRID_BREAKPOINTS = (() => {\n  const breakpoints: { [key: number | string]: number } = {\n    default: MAX_COLUMNS,\n  };\n  for (let i = 1; i <= MAX_COLUMNS; i++)\n    breakpoints[i * (IMAGE_SIZE + 2 * IMAGE_MARGIN)] = i - 1;\n  return breakpoints;\n})();\n\nconst Grid = styled(Masonry)`\n  display: flex;\n  justify-content: center;\n\n  > div {\n    width: fit-content !important;\n\n    > * {\n      margin: ${IMAGE_MARGIN}px;\n    }\n  }\n`;\n\nexport const HomeRoute: React.FC = () => {\n  const [images, setImages] = useState<ImageModel[]>();\n  const history = useHistory();\n\n  useEffect(() => {\n    ImageService.list().then(setImages);\n  }, [setImages]);\n\n  const imageTiles = images?.map((img) => (\n    <BlurHashWrapper\n      key={img.id}\n      image={img}\n      width={IMAGE_SIZE}\n      imageURL={ImageService.getThumbnailSource(img.id, IMAGE_SIZE)}\n      onClick={(id) => history.push(`/images/${id}`)}\n    />\n  ));\n\n  return (\n    <Grid className=\"\" breakpointCols={GRID_BREAKPOINTS}>\n      {imageTiles}\n    </Grid>\n  );\n};\n","import { Header } from 'components/Header';\nimport { PageContainer } from 'components/PageContainer';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { AboutRoute } from 'routes/about/About';\nimport { ContactRoute } from 'routes/contact/Contact';\nimport { ImageRoute } from 'routes/image/Image';\nimport { createGlobalStyle } from 'styled-components';\nimport { HomeRoute } from './routes/home/Home';\n\nconst GlobalStyle = createGlobalStyle`\n  box-sizing: border-box;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <PageContainer>\n          <Header />\n          <Route exact path=\"/\" component={HomeRoute} />\n          <Route exact path=\"/about\" component={AboutRoute} />\n          <Route exact path=\"/contact\" component={ContactRoute} />\n          <Route exact path=\"/images/:id\" component={ImageRoute} />\n        </PageContainer>\n      </Router>\n      <GlobalStyle />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.table);\n"],"sourceRoot":""}